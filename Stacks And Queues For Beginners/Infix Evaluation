import java.io.*;
import java.util.*;

public class Main{
  

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String exp = br.readLine();

    Stack<Integer> operends = new Stack<>();
    Stack<Character> opters = new Stack<>();

    for(int i = 0 ; i < exp.length();i++){
        char ch = exp.charAt(i);

        if(ch == '('){
            opters.push(ch);
        }else if(Character.isDigit(ch)){
            operends.push(ch-'0');
        }
        if(ch == ')'){
            while(opters.peek() != '('){
                char opter = opters.pop();
                int v2 = operends.pop();
                int v1 = operends.pop();

                int opv = operation(v1,v2,opter);
                operends.push(opv);
            }
            opters.pop();
        }else if(ch == '+' || ch == '-' || ch == '*' || ch == '/'){
            //higher priority operators will sove 1st 
            while(opters.size() > 0 && opters.peek() != '(' && precedence(ch) <= precedence(opters.peek())){
                char opter = opters.pop();
                int v2 = operends.pop();
                int v1 = operends.pop();

                int opv = operation(v1,v2,opter);
                operends.push(opv);
            }
            opters.push(ch);
        }
    }
    while(opters.size() != 0){
        char opter = opters.pop();
        int v2 = operends.pop();
        int v1 = operends.pop();

        int opv = operation(v1,v2,opter);
        operends.push(opv);        
    }

    System.out.println(operends.peek());
 }
    public static int operation(int v1,int v2,char opter){
     if(opter == '+'){
         return v1+v2;
     }else if(opter == '-'){
         return v1-v2;
     }else if(opter == '*'){
         return v1*v2;
     }else{
         return v1/v2;
     }
 }

 public static int precedence(char opter){
     if(opter == '+'){
         return 1;
     }else if(opter == '-'){
         return 1;
     }else if(opter == '*'){
         return 2;
     }else{
         return 2;
     }
 }
}
