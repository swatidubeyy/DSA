//********************************recursive****************************


import java.io.*;
import java.util.*;

public class Main {
    public static int rec(int n){
        if(n == 0 || n == 1){
            return 1 ;
        }
        int h = 1 * rec(n-2);
        int v = 1 * rec(n-1);
        return v + h ;
    }
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();

        int ans = rec(n);
        System.out.println(ans);
    }
}


//********************************memoization****************************


import java.util.*;

public class Main {
    public static int mem(int n , int qb[]){
        if(n == 0 || n == 1){
            return 1 ;
        }
        if(qb[n] != 0){
            return qb[n];
        }
        int h = 1 * mem(n-2 , qb);
        int v = 1 * mem(n-1 , qb);
        return qb[n] = v + h ;
    }
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();

        int ans = mem(n , new int[n+1]);
        System.out.println(ans);
    }
}

//********************************tabulation****************************


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {

        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();

        int dp[] = new int[n + 1];

        for(int i = 0 ; i <= n ; i++){
            if(i == 1 || i == 0){
                dp[i] = 1;
                continue;
            }
            
            int v = 0 , h = 0;
            if(n-2 >= 0){
                h = 1 * dp[i-2];
            }
            v = 1 * dp[i-1];
            dp[i] = v + h; 
        }  

        System.out.println(dp[n]);  

    }
}
